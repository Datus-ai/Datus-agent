- input:
    sql_query: |
      WITH tokenInfo AS (
        SELECT "address"
        FROM "ETHEREUM_BLOCKCHAIN"."ETHEREUM_BLOCKCHAIN"."TOKENS"
        WHERE "name" = 'BNB'
      ),
      
      receivedTx AS (
        SELECT "tx"."to_address" AS "addr",
          "tokens"."name" AS "name",
        SUM(CAST("tx"."value" AS FLOAT) / POWER(10, 18)) AS "amount_received"
        FROM "ETHEREUM_BLOCKCHAIN"."ETHEREUM_BLOCKCHAIN"."TOKEN_TRANSFERS" AS "tx"
        JOIN tokenInfo ON "tx"."token_address" = tokenInfo."address"
        JOIN "ETHEREUM_BLOCKCHAIN"."ETHEREUM_BLOCKCHAIN"."TOKENS" AS "tokens"
          ON "tx"."token_address" = "tokens"."address"
        WHERE "tx"."to_address" <> '0x0000000000000000000000000000000000000000'
        GROUP BY "tx"."to_address", "tokens"."name"
      ),
      
      sentTx AS (
        SELECT "tx"."from_address" AS "addr",
          "tokens"."name" AS "name",
          SUM(CAST("tx"."value" AS FLOAT) / POWER(10, 18)) AS "amount_sent"
        FROM "ETHEREUM_BLOCKCHAIN"."ETHEREUM_BLOCKCHAIN"."TOKEN_TRANSFERS" AS "tx"
        JOIN tokenInfo ON "tx"."token_address" = tokenInfo."address"
        JOIN "ETHEREUM_BLOCKCHAIN"."ETHEREUM_BLOCKCHAIN"."TOKENS" AS "tokens"
          ON "tx"."token_address" = "tokens"."address"
        WHERE "tx"."from_address" <> '0x0000000000000000000000000000000000000000'
        GROUP BY "tx"."from_address", "tokens"."name"
      ),
      
      walletBalances AS (
        SELECT r."addr",
          COALESCE(SUM(r."amount_received"), 0) - COALESCE(SUM(s."amount_sent"), 0) AS "balance"
        FROM receivedTx AS r
        LEFT JOIN sentTx AS s
          ON r."addr" = s."addr"
        GROUP BY r."addr"
      )

      SELECT
        SUM("balance") AS "circulating_supply"
      FROM walletBalances;

- input:
    sql_query: |
      WITH timestamps AS
      (
        SELECT
          DATE_TRUNC(year,DATEADD(year,-1,DATE '2024-08-29')) AS ref_timestamp,
          LAST_DAY(DATEADD(week,2 + CAST(WEEKISO(ref_timestamp) != 1 AS INTEGER),ref_timestamp),week) AS end_week,
          DATEADD(day, day_num - 7, end_week) AS date_valid_std
        FROM
        (
          SELECT
            ROW_NUMBER() OVER (ORDER BY SEQ1()) AS day_num
          FROM
            TABLE(GENERATOR(rowcount => 7))
        )
      )
      SELECT
        country,
        postal_code,
        date_valid_std,
        tot_snowfall_in
      FROM
        GLOBAL_WEATHER__CLIMATE_DATA_FOR_BI.standard_tile.history_day
      NATURAL INNER JOIN
        timestamps
      WHERE
        country='US' AND
        tot_snowfall_in > 6.0
      ORDER BY
        postal_code,date_valid_std;

